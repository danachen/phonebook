{"version":3,"sources":["Form.js","Search.js","Persons.js","services/personsService.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","onSubmit","addPerson","value","newName","onChange","handleName","newPhone","handlePhone","type","Search","newSearch","e","setNewSearch","target","Persons","persons","handleDelete","map","person","className","name","phone","onClick","id","baseUrl","axios","get","then","response","data","newObject","post","put","delete","App","useState","setPersons","setNewName","setNewPhone","notificationMessage","setNotificationMessage","error","setError","useEffect","personsService","initialList","Notification","message","preventDefault","nameObject","isDuplicate","find","changedPerson","returnedPerson","catch","setTimeout","filter","concat","length","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4746702e.chunk.js","sourcesContent":["const Form = (props) => {\n  return (\n    <form onSubmit={props.addPerson}>\n        <div>\n          name:  <input \n            value = {props.newName}\n            onChange = {props.handleName}\n          />\n        </div>\n        <div>\n          phone:  <input \n            value = {props.newPhone}\n            onChange = {props.handlePhone}\n          />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n  )\n}\n\nexport default Form","const Search = (props) => {\n return (\n  <p>filter shown with <input type=\"text\" value={props.newSearch} onChange={(e) => props.setNewSearch(e.target.value)}></input></p>\n )\n}\n\nexport default Search","const Persons = ({persons, handleDelete}) => {\n  return (\n    <ul>\n      {persons.map(person => {\n        return <li className=\"person\" key={person.id}><p key={person.name}>{person.name} {person.phone} <button onClick={handleDelete} value={person.id}>delete</button></p></li>\n      })}\n    </ul>\n  )\n}\n\nexport default Persons","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nconst deleteEntry = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, deleteEntry }","import React, { useState, useEffect } from 'react'\nimport Form from './Form'\nimport Search from './Search'\nimport Persons from './Persons'\nimport personsService from './services/personsService'\nimport './index.css'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newPhone, setNewPhone ] = useState('')\n  const [ newSearch, setNewSearch ] = useState('')\n  const [notificationMessage, setNotificationMessage] = useState('')\n  const [error, setError] = useState('')\n\n  const handleNewName = (e) => {\n    setNewName(e.target.value)\n  }\n\n  const handleNewPhone = (e) => {\n    setNewPhone(e.target.value)\n  }\n\n  useEffect(() => {\n    personsService\n    .getAll()\n    .then(initialList => {\n        setPersons(initialList)\n      })\n  }, [])\n\n  const Notification = ({ message, error }) => {\n    if (error) {\n      return (\n        <div className=\"error\">\n          {error}\n        </div>\n      )\n    }\n\n    if (message) {\n      return (\n        <div className=\"message\">\n          {message}\n        </div>\n      )\n    }\n    return null\n  }\n\n  const filteredPersons = () => {\n    if (!newSearch.length) return persons;\n    return persons.filter(person => person.name.toLowerCase().includes(newSearch.toLowerCase()));\n  }\n\n  const isDuplicate = () => {\n    for (let person of persons) {\n      if (person.name === newName) return true;\n    }\n    return false;\n  }\n\n  const addPerson = (e) => {\n    e.preventDefault();\n    const nameObject = {\n      name: newName,\n      phone: newPhone,\n    }\n\n    if (!isDuplicate()) {\n      personsService\n        .create(nameObject)\n        .then(response => {\n          setPersons(persons.concat(response));\n          setNewName('');\n          setNewPhone('');\n          setNotificationMessage(`${response.name} was successfully added!`)\n        })\n\n    } else {\n      const person = persons.find(person => person.name === newName)\n      const id = person.id\n      const changedPerson = {...person, phone: newPhone}\n      personsService\n        .update(id, changedPerson)\n        .then(returnedPerson => {\n          setPersons(persons.map(person => person.id !== id ? person : returnedPerson))\n          setNotificationMessage(`${returnedPerson.name} phone number was successfully changed!`)\n        })\n        .catch(error => {\n          setError(`${person.name} was already removed`);\n          setTimeout(() => {\n            setError(null)\n          }, 5000)\n          setPersons(persons.filter(person => person.id !== id))\n          })\n    }\n  }\n\n  const handleDelete = (e) => {\n    const id = e.target.value\n    personsService.deleteEntry(id)\n                  .then (response => {\n                    setPersons(persons.filter(person => person !== id))\n                  }\n                )\n  }\n\n  return (\n    <div>\n      <Notification message={notificationMessage} error={error} />\n      <h2>Phonebook</h2>\n      <Search newSearch={newSearch} setNewSearch={setNewSearch} />\n      <h2>add a new</h2>\n      <Form addPerson={addPerson} handleName={handleNewName} handlePhone={handleNewPhone} newName={newName} newPhone={newPhone}/>\n      <h2>Numbers</h2>\n      <Persons persons={filteredPersons()} handleDelete={handleDelete} />\n    </div>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}